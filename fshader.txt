#version 430

in vec4 Position;
in vec3 Normal;

struct LightInfo {
    vec4 Position;  // Light position in eye coords
    vec3 Intensity; // Light intensity
};

uniform LightInfo Light;

struct MaterialInfo {
    vec3  Ka;        // Ambient  reflectivity
    vec3  Kd;        // Diffuse  reflectivity
    vec3  Ks;        // Specular reflectivity
    float Shininess; // Specular shininess factor
};

uniform MaterialInfo Material;

struct FogInfo {
    float  maxDist;
    float  minDist;
    vec3   color;
};

uniform FogInfo Fog;

out vec4 FragColor;

vec3 phongModel( vec4 position, vec3 normal ) {
    vec3 s         = normalize(vec3(Light.Position - position));
    vec3 v         = normalize(-position.xyz); // In eyeCoords, the viewer is at the origin -> only take negation of eyeCoords vector
    vec3 r         = reflect (-s, normal);

    float sDotN    = max(dot(s, normal), 0.0);

    vec3  ambient  = Material.Ka;
    vec3  diffuse  = Material.Kd * sDotN;
    vec3  spec     = vec3(0.0);
    if (sDotN > 0.0) {
        spec = Material.Ks * pow(max(dot(r,v), 0.0), Material.Shininess);
    }

    return Light.Intensity * (ambient + diffuse + spec);
}


void main()
{
    float dist = abs(Position.z);
    float fogFactor = (Fog.maxDist - dist) / (Fog.maxDist - Fog.minDist);
    fogFactor  = clamp (fogFactor, 0.0, 1.0);
    vec3 shadeColor;

    //FragColor = vec4 (1.0, 1.0, 0.0, 1.0);
    if( gl_FrontFacing ) {
        shadeColor = phongModel(Position, Normal);
        //FragColor = vec4(1.0, 0.0, 0.0, 1.0);
    } else {
        //FragColor = mix( vec4(BackColor, 1.0), vec4(1.0,0.0,0.0,1.0), 0.7 );
        shadeColor = phongModel(Position, -Normal);
        //FragColor = vec4(0.0, 1.0, 0.0, 1.0);
    }
    vec3 fcolor = mix(Fog.color, shadeColor, fogFactor);

    FragColor = vec4(fcolor, 1.0);
}
